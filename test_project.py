import project
import pytest

test_data = [
    # - BASE conversions valid
    (["1", "2", "2", "0", "d", "q"], "0"),
    (["1", "2", "2", "1011", "d", "q"], "1011"),
    (["1", "2", "10", "1", "d", "q"], "1"),
    (["1", "2", "10", "0", "d", "q"], "0"),
    (["1", "2", "10", "1101010110", "d", "q"], "854"),
    (["1", "2", "10", "000000", "d", "q"], "0"),
    (["1", "2", "10", "000000101", "d", "q"], "5"),
    (["1", "10", "2", "15", "d", "q"], "1111"),
    (["1", "10", "2", "00015", "d", "q"], "1111"),
    (["1", "10", "2", "000", "d", "q"], "0"),
    (["1", "10", "2", "1", "d", "q"], "1"),
    (["1", "16", "10", "A4B06", "d", "q"], "674566"),
    (["1", "10", "32", "674566", "d", "q"], "KIO6"),
    (["1", "16", "32", "A4B06", "d", "q"], "KIO6"),
    (["1", "16", "32", "f", "d", "q"], "F"),
    (["1", "32", "16", "KIO6", "d", "q"], "A4B06"),
    (["1", "36", "2", "KIO6", "d", "q"], "11101001101110000110"),
    (["1", "36", "16", "ZZ0H4", "d", "q"], "399F028"),

    (["1", "2", "2", "0", "l", "q"], "0"),
    (["1", "2", "2", "1011", "l", "q"], "1011"),
    (["1", "2", "10", "1", "l", "q"], "1"),
    (["1", "2", "10", "0", "l", "q"], "0"),
    (["1", "2", "10", "1101010110", "l", "q"], "854"),
    (["1", "2", "10", "000000", "l", "q"], "0"),
    (["1", "2", "10", "000000101", "l", "q"], "5"),
    (["1", "10", "2", "15", "l", "q"], "1111"),
    (["1", "10", "2", "00015", "l", "q"], "1111"),
    (["1", "10", "2", "000", "l", "q"], "0"),
    (["1", "10", "2", "1", "l", "q"], "1"),
    (["1", "16", "10", "A4B06", "l", "q"], "674566"),
    (["1", "10", "32", "674566", "l", "q"], "KIO6"),
    (["1", "16", "32", "A4B06", "l", "q"], "KIO6"),
    (["1", "16", "32", "f", "l", "q"], "F"),
    (["1", "32", "16", "KIO6", "l", "q"], "A4B06"),
    (["1", "36", "2", "KIO6", "l", "q"], "11101001101110000110"),
    (["1", "36", "16", "ZZ0H4", "l", "q"], "399F028"),

    # - BASE conversions invalid
    # invalid from_base
    (["1", "", "2", "2", "1011", "d", "q"], "1011"),
    (["1", "-", "2", "2", "1011", "d", "q"], "1011"),
    (["1", "111", "2", "2", "1011", "d", "q"], "1011"),
    (["1", " 1", "2", "2", "1011", "d", "q"], "1011"),
    (["1", "1", "2", "2", "1011", "d", "q"], "1011"),
    (["1", "0", "2", "2", "1011", "d", "q"], "1011"),
    (["1", "-1", "2", "2", "1011", "d", "q"], "1011"),
    (["1", "37", "2", "2", "1011", "d", "q"], "1011"),
    (["1", "a", "2", "2", "1011", "d", "q"], "1011"),
    (["1", "&", "2", "2", "1011", "d", "q"], "1011"),

    # invalid to_base
    (["1", "2", "", "2", "1011", "d", "q"], "1011"),
    (["1", "2", "-", "2", "1011", "d", "q"], "1011"),
    (["1", "2", "111", "2", "1011", "d", "q"], "1011"),
    (["1", "2", " 1", "2", "1011", "d", "q"], "1011"),
    (["1", "2", "1", "2", "1011", "d", "q"], "1011"),
    (["1", "2", "0", "2", "1011", "d", "q"], "1011"),
    (["1", "2", "-1", "2", "1011", "d", "q"], "1011"),
    (["1", "2", "37", "2", "1011", "d", "q"], "1011"),
    (["1", "2", "a", "2", "1011", "d", "q"], "1011"),
    (["1", "2", "&", "2", "1011", "d", "q"], "1011"),

    # invalid number
    (["1", "2", "2", "1011d", "1011", "d", "q"], "1011"),
    (["1", "2", "2", "10 11", "1011", "d", "q"], "1011"),
    (["1", "2", "2", "", "1011", "d", "q"], "1011"),
    (["1", "2", "2", "-", "1011", "d", "q"], "1011"),
    (["1", "2", "2", "3", "1011", "d", "q"], "1011"),
    (["1", "2", "2", "10113", "1011", "d", "q"], "1011"),
    (["1", "2", "2", "1011a", "1011", "d", "q"], "1011"),
    (["1", "2", "2", "1011&", "1011", "d", "q"], "1011"),

    # invalid method
    (["1", "2", "2", "1011", "a", "d", "q"], "1011"),
    (["1", "2", "2", "1011", "-", "d", "q"], "1011"),
    (["1", "2", "2", "1011", "", "d", "q"], "1011"),
    (["1", "2", "2", "1011", "d&", "d", "q"], "1011"),

    # - TWO's complement valid
    (["2", "2", "-8", "4", "d", "q"], "1000"),
    (["2", "2", "-1", "4", "d", "q"], "1111"),
    (["2", "2", "0", "4", "d", "q"], "0000"),
    (["2", "2", "7", "4", "d", "q"], "0111"),

    (["2", "1", "1000", "d", "q"], "-8"),
    (["2", "1", "1111", "d", "q"], "-1"),
    (["2", "1", "0000", "d", "q"], "0"),
    (["2", "1", "0111", "d", "q"], "7"),

    (["2", "2", "-8", "4", "l", "q"], "1000"),
    (["2", "2", "-1", "4", "l", "q"], "1111"),
    (["2", "2", "0", "4", "l", "q"], "0000"),
    (["2", "2", "7", "4", "l", "q"], "0111"),

    (["2", "1", "1000", "l", "q"], "-8"),
    (["2", "1", "1111", "l", "q"], "-1"),
    (["2", "1", "0000", "l", "q"], "0"),
    (["2", "1", "0111", "l", "q"], "7"),

    # - TWO's complement invalid

    # invalid number
    (["2", "2", "-a", "-8", "4", "d", "q"], "1000"),
    (["2", "2", "a", "-8", "4", "d", "q"], "1000"),
    (["2", "2", "", "-8", "4", "d", "q"], "1000"),
    (["2", "2", "1 1", "-8", "4", "d", "q"], "1000"),

    # number out of range
    (["2", "2", "8", "4", "-8", "d", "q"], "1000"),
    (["2", "2", "-9", "4", "-8", "d", "q"], "1000"),

    # invalid two's complement
    (["2", "1", "1000a", "1000", "d", "q"], "-8"),
    (["2", "1", "", "1000", "d", "q"], "-8"),
    (["2", "1", "a", "1000", "d", "q"], "-8"),
    (["2", "1", "-1000", "1000", "d", "q"], "-8"),
    (["2", "1", "10132", "1000", "d", "q"], "-8"),

    # - QUIT
    (["q"], "-1")
]


@pytest.mark.parametrize("inputs, main_ret", test_data)
def test_project(inputs, main_ret):
    input_values = inputs
    output = []

    def mock_input(s):
        print(s)
        output.append(s)
        print(input_values[0])
        return input_values.pop(0)

    project.input = mock_input

    ret_val = project.main()
    assert ret_val == main_ret
